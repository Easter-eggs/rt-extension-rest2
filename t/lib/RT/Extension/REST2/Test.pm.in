package RT::Extension::REST2::Test;

use strict;
use warnings;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt4/local/lib /opt/rt4/lib);

use base 'RT::Test';

use RT::Extension::REST2;
use Test::WWW::Mechanize::PSGI;
use RT::User;

sub mech { RT::Extension::REST2::Test::Mechanize->new }

{
    my $u;

    sub authorization_header {
        $u = _create_user() unless ($u && $u->id);
        return 'Basic dGVzdDpwYXNzd29yZA==';
    }

    sub user {
        $u = _create_user() unless ($u && $u->id);
        return $u;
    }

    sub _create_user {
        my $u = RT::User->new( RT->SystemUser );
        $u->Create(
            Name => 'test',
            Password => 'password',
            Privileged => 1,
        );
        return $u;
    }
}

{
    package RT::Extension::REST2::Test::Mechanize;
    use parent 'Test::WWW::Mechanize::PSGI';

    use JSON;
    my $json = JSON->new->utf8;

    sub new {
        my $class = shift;
        my %args = (
            app => RT::Extension::REST2->to_app,
            @_,
        );
        return $class->SUPER::new(%args);
    }

    sub json_response {
        local $Test::Builder::Level = $Test::Builder::Level + 1;
        my $self = shift;

        my $res = $self->response;

        local $main::TODO;
        Test::More::like($res->header('content-type'),
            qr{^application/json(?:; charset="?utf-8"?)?$});

        return $json->decode($res->content);
    }

    # modeled off of LWP::UserAgent::put
    sub patch {
        require HTTP::Request::Common;
        my($self, @parameters) = @_;
        my @suff = $self->_process_colonic_headers(\@parameters, (ref($parameters[1]) ? 2 : 1));
        return $self->request( HTTP::Request::Common::_simple_req( 'PATCH', @parameters ), @suff );
    }
}

1;
